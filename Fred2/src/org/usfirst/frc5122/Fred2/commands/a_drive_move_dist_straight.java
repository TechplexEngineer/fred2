// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5122.Fred2.commands;

import org.usfirst.frc5122.Fred2.Robot;
import org.usfirst.frc5122.Fred2.RobotMap;
import org.usfirst.frc5122.Fred2.U;

import edu.wpi.first.wpilibj.command.PIDCommand;

/**
 *
 */
public class  a_drive_move_dist_straight extends PIDCommand {

	private double distance;
	private double maxspeed;
	
	public final static double kp = 0.078;
	public final static double ki = 0;
	public final static double kd = 0.6;
	public final static double max = 0.8;
	
	public a_drive_move_dist_straight(double distance, double p, double i, double d, double max ) {
		super("a_drive_move_dist_straight", p, i, d, 0.01);
		this.distance = distance;
		this.maxspeed = max;
		getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.2);
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}
    
    public a_drive_move_dist_straight(double distance, double maxspeed) {
    	this(distance, kp, ki, kd, maxspeed);
    }
    public a_drive_move_dist_straight(double distance) {
    	this(distance, max);
    }
    

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
//    	System.out.println("PIDGET: "+RobotMap.driveLeftEncoder.pidGet());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return RobotMap.driveLeftEncoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	output = U.constrain(-maxspeed, output, maxspeed);
    	if (Math.abs(output) < .4 && output != 0) {
    		output = (output/Math.abs(output))*.4;
    	}
    	if ((timeSinceInitialized()+.4)<1) {
    		 output = output * (timeSinceInitialized()+.4);
    	}
    		
    	Robot.drive.driveStraight(-output);
//    	Robot.drive.HDrive(-output, 0, 0);
//    	System.out.println("PIDOUT: "+output);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.driveLeftEncoder.reset();
    	Robot.drive.resetGyro();
    	getPIDController().setSetpoint(distance);
    	getPIDController().enable();
//    	System.out.println("INIT "+U.className(this));
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
//    	System.out.println("EXEC a_drive_move_dist");
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
//    	System.out.println("----ERROR: "+getPIDController().getError()+" R:"+RobotMap.driveLeftEncoder.getRate());
//    	return getPIDController().getError() <= THRESH;
    	return Math.abs(getPIDController().getError()) <= 1.5;// && RobotMap.driveLeftEncoder.getRate() < .5
    	//return getPIDController().onTarget();
    }

    // Called once after isFinished returns true
    protected void end() {
//    	System.out.println("END");
    	getPIDController().disable();
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
//    	System.out.println("INT");
    	end();
    }
}
