// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5122.Fred2.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;

import org.usfirst.frc5122.Fred2.Robot;
import org.usfirst.frc5122.Fred2.RobotMap;
import org.usfirst.frc5122.Fred2.U;

/**
 *
 */
public class  a_drive_turn_angle extends PIDCommand {

	private double angle;
	double THRESH = 5;
    public a_drive_turn_angle(double angle) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("a_drive_turn_angle", 1.0, 0.0, 0.0, 0.02);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.2);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        this.angle = angle;

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:subystem
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
    	System.out.println("Input: "+RobotMap.drivegyro.pidGet());

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return RobotMap.drivegyro.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	
//    	if (angle < 0) {
//    		output = -output;
//    	}
    	System.out.println("Output: "+output);
        Robot.drive.HDrive(0, output, 0);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("INIT a_drive_turn_angle");
    	Robot.drive.resetGyro();
    	getPIDController().setSetpoint(angle);
    	getPIDController().enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	System.out.println("EXEC a_drive_turn_angle");
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	boolean done = (Math.abs(getPIDController().getError()) <= THRESH);
    	System.out.println("IsFini: "+done);
    	return done;
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("END a_drive_turn_angle");
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	System.out.println("INTER");
    	end();
    }
}
