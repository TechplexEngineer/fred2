// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5122.Fred2.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class  sd_drive_turn_angle extends Command {
	
	a_drive_turn_angle cmd;

    public sd_drive_turn_angle() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    	SmartDashboard.putNumber("kp", 0.055);
    	SmartDashboard.putNumber("ki", 0.0);
    	SmartDashboard.putNumber("kd", 0.5);
    	SmartDashboard.putNumber("Max Speed", 1);
    	SmartDashboard.putNumber("angle",12);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("INIT SD");
    	double angleSD = SmartDashboard.getNumber("TurnAngle");
//    	a_drive_turn_angle turnAngle = new a_drive_turn_angle(angleSD);
//    	turnAngle.start();
    	double p 	= SmartDashboard.getNumber("kp");
    	double i 	= SmartDashboard.getNumber("ki");
    	double d 	= SmartDashboard.getNumber("kd");
    	double max = SmartDashboard.getNumber("Max Speed");
    	cmd = new a_drive_turn_angle(angleSD, p, i, d, max, true);
    	cmd.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {

    }
}
