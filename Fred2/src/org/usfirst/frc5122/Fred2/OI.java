// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5122.Fred2;

import org.usfirst.frc5122.Fred2.commands.*;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driver;
    public Joystick aux;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Xbox xbox;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        aux = new Joystick(1);
        
        driver = new Joystick(0);
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("oi_HDrive", new oi_HDrive());

        SmartDashboard.putData("auto_3totes", new auto_3totes());

        SmartDashboard.putData("a_lift_top", new a_lift_top());

        SmartDashboard.putData("a_lift_bottom", new a_lift_bottom());

        SmartDashboard.putData("a_grabber_ungrab", new a_grabber_ungrab());

        SmartDashboard.putData("a_grabber_grab", new a_grabber_grab());

        SmartDashboard.putData("oi_Lift", new oi_Lift());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        xbox = new Xbox(aux);
        SmartDashboard.putData("a_lift_move_time(1 sec, up)", new a_lift_move_time(1, 1));
        SmartDashboard.putData("a_lift_move_time(1 sec, down)", new a_lift_move_time(1, -1));
        SmartDashboard.putData("a_drive_move_dist(12inches, fwd)", new a_drive_move_dist(12*4));
        SmartDashboard.putData("a_drive_turn_angle(45)", new a_drive_turn_angle(45));
        SmartDashboard.putData("a_drive_turn_angle(-45)", new a_drive_turn_angle(-45));
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() {
        return driver;
    }

    public Joystick getAux() {
        return aux;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    private double getLeftTrigger() {
    	return getAux().getRawAxis(2);
	}
	private double getRightTrigger() {
		return getAux().getRawAxis(3);
	}
	
	public Xbox getXbox() {
    	return xbox;
    }
}

