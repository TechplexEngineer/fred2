// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Drive* Robot::drive = 0;
Lift* Robot::lift = 0;
Grabber* Robot::grabber = 0;
Lights* Robot::lights = 0;
CanGrabber* Robot::canGrabber = 0;
OI* Robot::oi = 0;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
SendableChooser* Robot::autoChooser = 0;

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	drive = new Drive();
	lift = new Lift();
	grabber = new Grabber();
	lights = new Lights();
	canGrabber = new CanGrabber();
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();


	grabbercmd = new oi_Grabber();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	autoChooser = new SendableChooser();

//	autoChooser->AddObject("Default Auto - Lift up 26in", new auto_liftup());
//	autoChooser->AddDefault("Lift up 12in", new auto_liftup_2());
//	autoChooser->AddObject("Robotset: fwd, right 90", new auto_robotset());
	autoChooser->AddObject("auto_3totes", new auto_3totes());
//	autoChooser->AddObject("Stack 3 totes, partners remove RCs", new auto_3totes_norc());
//	autoChooser->AddObject("Stack bin on tote P1", new auto_rc_totenm3());
	autoChooser->AddObject("1tote_pos3",new auto_1tote_pos3());
	autoChooser->AddObject("1tote_pos2", new auto_1tote_pos2());
	autoChooser->AddObject("1tote_pos1_lm", new auto_1tote_pos1());
	autoChooser->AddObject("1tote_pos1_lm2", new auto_1tote_pos1_lm2());
	autoChooser->AddObject("2tote_pos1", new auto_2tote_pos1());
	autoChooser->AddObject("1RC_bump", new auto_1rc_bump());
	autoChooser->AddObject("1tote_bump", new auto_1tote_bump());
//	autoChooser->AddObject("CanGrab", new auto_canGrabber());
	SmartDashboard::PutData("Auto Chooser", autoChooser);
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

